import os
import sys
import pyfgag.dependency_builder as deps
import subprocess
import pathlib
import json
import shutil


def get_board_path_by_name(workspace_path:str, board_name:str):
    workspace_path = deps.get_workspace_path(workspace_path)
    board_path = os.path.join(workspace_path, "fpga-projects", "fpga", "boards", board_name)
    return board_path

def get_top_path_by_name(workspace_path:str, top_name:str):
    workspace_path = deps.get_workspace_path(workspace_path)
    top_path = os.path.join(workspace_path, "fpga-projects", "fpga", "tops", top_name)
    return top_path

class HardwareCompiler(object):
    def __init__(self, board_name:str, top_name:str, base_build_dir=None):
        self.current_folder = os.getcwd()
        self.workspace_path = deps.get_workspace_path(self.current_folder)
        self.board_name = board_name
        self.top_name = top_name
        if base_build_dir is None:
            self.base_build_dir = os.path.join(self.workspace_path, "fpga-projects", "fpga", "builds", "fpga")
        else:
            self.base_build_dir = base_build_dir
        
        # make build folder
        self.build_dir =  os.path.join(self.base_build_dir, "%s__%s" % (board_name, top_name) )
        pathlib.Path(self.build_dir).mkdir(parents=True, exist_ok=True)

        print(self.build_dir)

        # 
        self.board_path = get_board_path_by_name(self.workspace_path, board_name)


        # 
        self.top_path = get_top_path_by_name(self.workspace_path, top_name)


        self.dependencies = deps.MultiDependencyBuilder(self.board_path, self.top_path) 


    def make_project(self, clean=True):
        cmds = []
        
        if clean:
            shutil.rmtree(self.build_dir)
            pathlib.Path(self.build_dir).mkdir(parents=True, exist_ok=True)

        # first copy all the boards files into the build directory
        board_json_file_path = os.path.join(self.board_path, "files.json")
        with open(board_json_file_path, "r") as json_file:
            self.json_deps = json.loads(json_file.read())

            for project_file in self.json_deps["project_files"]:
                project_file_path_src = os.path.join(self.board_path, project_file)
                project_file_path_dst = os.path.join(self.build_dir, project_file)
                shutil.copyfile(project_file_path_src, project_file_path_dst)

        cmds = self.create_cmds_make_project()
        for cmd in cmds:
            print("RUNING %s" % cmd)
            cmd_ret = subprocess.call(cmd, shell=True, cwd=self.build_dir)
            if cmd_ret:
                raise Exception()

    def create_cmds_make_project(self):
        raise NotImplementedError("Subclasses should implement this!")


    def build_bitstream(self):
        cmds = self.create_cmds_build_bitstream()
        for cmd in cmds:
            print("RUNING %s" % cmd)
            cmd_ret = subprocess.call(cmd, shell=True, cwd=self.build_dir)
            if cmd_ret:
                raise Exception()

    def create_cmds_build_bitstream(self):
        raise NotImplementedError("Subclasses should implement this!")



class QuartusCompiler(HardwareCompiler):

    def create_cmds_make_project(self):
        
        project_file_path = os.path.join(self.build_dir, "quartus_project.qsf")
        with open(project_file_path, "a+") as project_file:


            # includes
            project_file.write("\n\n#includes (autogenerated)\n"  )
            for include in self.dependencies.get_full_lib_dependencies():
                project_file.write("set_global_assignment -name SEARCH_PATH \"%s\"\n" % include  )

            # files
            project_file.write("\n\n# source files (autogenerated)\n"  )
            for source_file in self.dependencies.get_full_file_dependencies():
                project_file.write("set_global_assignment -name SYSTEMVERILOG_FILE \"%s\"\n" % source_file  )


        return []

    def create_cmds_build_bitstream(self):
        
        cmds = []

        cmds.append("echo \"Running Synthesis\" ")
        cmds.append("quartus_map --read_settings_files=on --write_settings_files=off quartus_project -c quartus_project")


        cmds.append("echo \"Running fitter\" ")
        cmds.append("quartus_fit --read_settings_files=off --write_settings_files=off quartus_project -c quartus_project")


        cmds.append("echo \"Running assembly\" ")
        cmds.append("quartus_asm --read_settings_files=on --write_settings_files=off quartus_project -c quartus_project")

        cmds.append("echo \"Running timing analysis\" ")
        cmds.append("quartus_sta quartus_project -c quartus_project")



        return cmds
